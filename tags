!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFFER_SIZE	nonpersistent/C/client.c	28;"	d	file:
BUFFER_SIZE	nonpersistent/C/server.c	34;"	d	file:
BUFFER_SIZE	nonpersistent/C/server.c	48;"	d	file:
BUFFER_SIZE	persistent/C/client.c	28;"	d	file:
BUFFER_SIZE	persistent/C/server.c	34;"	d	file:
BUFFER_SIZE	persistent/C/server.c	48;"	d	file:
BUFFER_SIZE	tutorial/C/client.c	28;"	d	file:
BUFFER_SIZE	tutorial/C/server.c	34;"	d	file:
BUFFER_SIZE	tutorial/C/server.c	48;"	d	file:
FileData	nonpersistent/C/client.c	/^typedef struct FileData {$/;"	s	file:
FileData	nonpersistent/C/client.c	/^} FileData;$/;"	t	typeref:struct:FileData	file:
FileData	persistent/C/client.c	/^typedef struct FileData {$/;"	s	file:
FileData	persistent/C/client.c	/^} FileData;$/;"	t	typeref:struct:FileData	file:
FileData	tutorial/C/client.c	/^typedef struct FileData {$/;"	s	file:
FileData	tutorial/C/client.c	/^} FileData;$/;"	t	typeref:struct:FileData	file:
NUM_FILES	nonpersistent/C/client.c	13;"	d	file:
NUM_FILES	nonpersistent/C/server.c	15;"	d	file:
NUM_FILES	persistent/C/client.c	13;"	d	file:
NUM_FILES	persistent/C/server.c	15;"	d	file:
NUM_FILES	tutorial/C/client.c	13;"	d	file:
NUM_FILES	tutorial/C/server.c	15;"	d	file:
PORT	nonpersistent/C/client.c	12;"	d	file:
PORT	nonpersistent/C/server.c	13;"	d	file:
PORT	persistent/C/client.c	12;"	d	file:
PORT	persistent/C/server.c	13;"	d	file:
PORT	tutorial/C/client.c	12;"	d	file:
PORT	tutorial/C/server.c	13;"	d	file:
RecieveDataCallback	nonpersistent/C/client.c	/^typedef void (*RecieveDataCallback)(void *buf, uint32_t size, void *data);$/;"	t	file:
RecieveDataCallback	persistent/C/client.c	/^typedef void (*RecieveDataCallback)(void *buf, uint32_t size, void *data);$/;"	t	file:
RecieveDataCallback	tutorial/C/client.c	/^typedef void (*RecieveDataCallback)(void *buf, uint32_t size, void *data);$/;"	t	file:
data	persistent/Python/folder1/s.py	/^    data = conn.recv(1024)$/;"	v
data	persistent/Python/folder2/r.py	/^        data = s.recv(1024)$/;"	v
data	tutorial/Python/folder1/s.py	/^    data = conn.recv(1024)$/;"	v
data	tutorial/Python/folder2/r.py	/^        data = s.recv(1024)$/;"	v
f	persistent/Python/folder1/s.py	/^    f = open(filename,'rb')$/;"	v
f	tutorial/Python/folder1/s.py	/^    f = open(filename,'rb')$/;"	v
false	nonpersistent/C/client.c	14;"	d	file:
false	nonpersistent/C/server.c	12;"	d	file:
false	persistent/C/client.c	14;"	d	file:
false	persistent/C/server.c	12;"	d	file:
false	tutorial/C/client.c	14;"	d	file:
false	tutorial/C/server.c	12;"	d	file:
file_names	nonpersistent/C/client.c	/^const char *file_names[] = {"file1.txt", "file2.txt", "file3.txt"};$/;"	v
file_names	nonpersistent/C/server.c	/^const char *file_names[3] = {"file1.txt", "file2.txt", "file3.txt" };$/;"	v
file_names	persistent/C/client.c	/^const char *file_names[] = {"file1.txt", "file2.txt", "file3.txt"};$/;"	v
file_names	persistent/C/server.c	/^const char *file_names[3] = {"file1.txt", "file2.txt", "file3.txt" };$/;"	v
file_names	tutorial/C/client.c	/^const char *file_names[] = {"file1.txt", "file2.txt", "file3.txt"};$/;"	v
file_names	tutorial/C/server.c	/^const char *file_names[3] = {"file1.txt", "file2.txt", "file3.txt" };$/;"	v
file_sizes	nonpersistent/C/client.c	/^int file_sizes[NUM_FILES];$/;"	v
file_sizes	nonpersistent/C/server.c	/^uint32_t file_sizes[NUM_FILES];$/;"	v
file_sizes	persistent/C/client.c	/^int file_sizes[NUM_FILES];$/;"	v
file_sizes	persistent/C/server.c	/^uint32_t file_sizes[NUM_FILES];$/;"	v
file_sizes	tutorial/C/client.c	/^int file_sizes[NUM_FILES];$/;"	v
file_sizes	tutorial/C/server.c	/^uint32_t file_sizes[NUM_FILES];$/;"	v
filename	persistent/Python/folder1/s.py	/^filename = raw_input("Enter file to share:")$/;"	v
filename	tutorial/Python/folder1/s.py	/^filename = raw_input("Enter file to share:")$/;"	v
fp	nonpersistent/C/client.c	/^    FILE *fp;$/;"	m	struct:FileData	file:
fp	persistent/C/client.c	/^    FILE *fp;$/;"	m	struct:FileData	file:
fp	tutorial/C/client.c	/^    FILE *fp;$/;"	m	struct:FileData	file:
get_file_size	nonpersistent/C/server.c	/^uint32_t get_file_size(const char *name) {$/;"	f
get_file_size	persistent/C/server.c	/^uint32_t get_file_size(const char *name) {$/;"	f
get_file_size	tutorial/C/server.c	/^uint32_t get_file_size(const char *name) {$/;"	f
host	persistent/Python/folder1/s.py	/^host = ""$/;"	v
host	persistent/Python/folder2/r.py	/^host = ""$/;"	v
host	tutorial/Python/folder1/s.py	/^host = ""$/;"	v
host	tutorial/Python/folder2/r.py	/^host = ""$/;"	v
l	persistent/Python/folder1/s.py	/^       l = f.read(1024)$/;"	v
l	persistent/Python/folder1/s.py	/^    l = f.read(1024)$/;"	v
l	tutorial/Python/folder1/s.py	/^       l = f.read(1024)$/;"	v
l	tutorial/Python/folder1/s.py	/^    l = f.read(1024)$/;"	v
main	nonpersistent/C/client.c	/^int main(int argc, char const *argv[])$/;"	f
main	nonpersistent/C/server.c	/^int main(int argc, char const *argv[])$/;"	f
main	persistent/C/client.c	/^int main(int argc, char const *argv[])$/;"	f
main	persistent/C/server.c	/^int main(int argc, char const *argv[])$/;"	f
main	tutorial/C/client.c	/^int main(int argc, char const *argv[])$/;"	f
main	tutorial/C/server.c	/^int main(int argc, char const *argv[])$/;"	f
min	nonpersistent/C/client.c	11;"	d	file:
min	nonpersistent/C/server.c	9;"	d	file:
min	persistent/C/client.c	11;"	d	file:
min	persistent/C/server.c	9;"	d	file:
min	tutorial/C/client.c	11;"	d	file:
min	tutorial/C/server.c	9;"	d	file:
port	persistent/Python/folder1/s.py	/^port = 60001$/;"	v
port	persistent/Python/folder2/r.py	/^port = 60001                $/;"	v
port	tutorial/Python/folder1/s.py	/^port = 60001$/;"	v
port	tutorial/Python/folder2/r.py	/^port = 60001                $/;"	v
read_file	nonpersistent/C/client.c	/^void read_file() {$/;"	f
read_file	persistent/C/client.c	/^void read_file() {$/;"	f
read_file	tutorial/C/client.c	/^void read_file() {$/;"	f
read_file_sizes	nonpersistent/C/server.c	/^void read_file_sizes() {$/;"	f
read_file_sizes	persistent/C/server.c	/^void read_file_sizes() {$/;"	f
read_file_sizes	tutorial/C/server.c	/^void read_file_sizes() {$/;"	f
receive_int	nonpersistent/C/client.c	/^uint32_t receive_int(int *num, const int sockfd)$/;"	f
receive_int	persistent/C/client.c	/^uint32_t receive_int(int *num, const int sockfd)$/;"	f
receive_int	tutorial/C/client.c	/^uint32_t receive_int(int *num, const int sockfd)$/;"	f
recieveFileDataCallback	nonpersistent/C/client.c	/^void recieveFileDataCallback(void *buf, uint32_t size, void *vd) {$/;"	f
recieveFileDataCallback	persistent/C/client.c	/^void recieveFileDataCallback(void *buf, uint32_t size, void *vd) {$/;"	f
recieveFileDataCallback	tutorial/C/client.c	/^void recieveFileDataCallback(void *buf, uint32_t size, void *vd) {$/;"	f
recieve_data_handler	nonpersistent/C/client.c	/^void recieve_data_handler(const int sockfd, RecieveDataCallback cb, const uint32_t total_size,  char *out, void *data) {$/;"	f
recieve_data_handler	persistent/C/client.c	/^void recieve_data_handler(const int sockfd, RecieveDataCallback cb, const uint32_t total_size,  char *out, void *data) {$/;"	f
recieve_data_handler	tutorial/C/client.c	/^void recieve_data_handler(const int sockfd, RecieveDataCallback cb, const uint32_t total_size,  char *out, void *data) {$/;"	f
s	persistent/Python/folder1/s.py	/^s = socket.socket()$/;"	v
s	persistent/Python/folder2/r.py	/^s = socket.socket()             $/;"	v
s	tutorial/Python/folder1/s.py	/^s = socket.socket()$/;"	v
s	tutorial/Python/folder2/r.py	/^s = socket.socket()             $/;"	v
send_file	nonpersistent/C/server.c	/^void send_file(const int sockfd, const char *filename, const unsigned long filesize) {$/;"	f
send_file	persistent/C/server.c	/^void send_file(const int sockfd, const char *filename, const unsigned long filesize) {$/;"	f
send_file	tutorial/C/server.c	/^void send_file(const int sockfd, const char *filename, const unsigned long filesize) {$/;"	f
send_file_size	nonpersistent/C/server.c	/^void send_file_size(const int sockfd, const uint32_t file_size) {$/;"	f
send_file_size	persistent/C/server.c	/^void send_file_size(const int sockfd, const uint32_t file_size) {$/;"	f
send_file_size	tutorial/C/server.c	/^void send_file_size(const int sockfd, const uint32_t file_size) {$/;"	f
